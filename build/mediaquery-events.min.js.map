{"version":3,"file":"mediaquery-events.min.js","mappings":"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","sources":["webpack:///./MediaQueryEvents.js","webpack:///./mediaquery-events.js","webpack:///./attachToContext.js"],"sourcesContent":["/**\n * MediaQueryEvents\n * @class\n */\nexport class MediaQueryEvents {\n\n    /**\n     * Reserved event names\n     *  no queries are created for those defined here since they would not work\n     * @public\n     * @static\n     * @property\n     * @type {Array<string>}\n     */\n    static reservedNames = [ 'media.on', 'media.off', 'media.change' ];\n\n    /**\n     * Debug object\n     * @private\n     * @property\n     * @type {null|console|Object}\n     */\n    #debug = null;\n\n    /**\n     * Event target\n     * @private\n     * @property\n     * @type {null|window|document|HTMLElement|Object}\n     */\n    #target = null;\n\n    /**\n     * Media queries reference\n     * @private\n     * @property\n     * @type {Object}\n     */\n    #queries = {};\n\n    /**\n     * MediaQueryListEventPonyFill constructor\n     * @private\n     * @property\n     * @type {null|MediaQueryListEventPonyFill|Function}\n     */\n    #ponyfill = null;\n\n    /**\n     * Constructor\n     * @constructor\n     * @param {window|document|HTMLElement|Object} target - Object to dispatch and bind events on\n     * @param {null|Function} ponyfill - MediaQueryListEvent ponyfill object constructor\n     * @param {null|console|Object} debug - Console or alike object to show debugging\n     */\n    constructor( { target = window, ponyfill = null, debug = null } = {} ) {\n        if ( !target.addEventListener || !target.removeEventListener || !target.dispatchEvent ) {\n            const msg = 'Must implement following methods: addEventListener, removeEventListener, dispatchEvent';\n            throw new Error( 'MediaQueryEvents::constructor Argument { target } ' + msg );\n        }\n        this.#debug = debug;\n        this.#target = target;\n        if ( typeof ponyfill === 'function' ) this.#ponyfill = ponyfill;\n    }\n\n    /**\n     * Target getter\n     * @public\n     * @return {window|document|HTMLElement|Object} - Event target\n     */\n    get target() {\n        return this.#target;\n    }\n\n    /**\n     * Debug getter\n     * @public\n     * @return {null|console|Object} - Debug reference\n     */\n    get debug() {\n        return this.#debug;\n    }\n\n    /**\n     * Debug setter\n     * @public\n     * @param {null|console|Object} state - Debug reference\n     * @return {void}\n     */\n    set debug( state ) {\n        if ( typeof state !== 'object' ) {\n            throw new Error( 'MediaQueryEvents::debug Property value must be an Object or null' );\n        }\n        this.#debug = state;\n    }\n\n    /**\n     * Get existing or create new media query\n     * @private\n     * @param {string} query - Media query string\n     * @return {MediaQueryList|null} - MediaQueryList object representation of media query or null if reserved\n     */\n    #require_query( query ) {\n\n        // Empty query or invalid type\n        if ( typeof query !== 'string' || !query.length ) {\n            throw new Error( 'MediaQueryEvents::#require_query Argument query must be a non empty string' );\n        }\n\n        // Check reserved event names\n        if ( this.constructor.reservedNames.includes( query ) ) return null;\n\n        // Create query\n        if ( !this.#queries[ query ] ) {\n            let media;\n            try {\n                media = window.matchMedia( query );\n            } catch ( e ) {\n                if ( this.#debug ) this.#debug.error( e );\n                throw new Error( 'MediaQueryEvents::#require_query Argument query must be a valid media query' );\n            }\n\n            /**\n             * Internal query event handler\n             * @private\n             * @param {MediaQueryListEvent} event - Event object\n             * @return {void}\n             */\n            media.onchange = ( event ) => { this.#event_media( event, query ); };\n            this.#queries[ query ] = media;\n            return media;\n        }\n\n        // Return defined query\n        return this.#queries[ query ];\n    }\n\n    /**\n     * Create MediaQueryListEvent object\n     * @private\n     * @param {string} media - Media query\n     * @param {boolean} matches - Query matches\n     * @return {MediaQueryListEvent|MediaQueryListEventPonyFill|Object} - Event object\n     */\n    #get_MediaQueryListEvent( media, matches ) {\n        let event;\n        try {\n            event = new MediaQueryListEvent( 'change', { media, matches } );\n        } catch ( e ) {\n            if ( this.#debug ) this.#debug.error( e );\n\n            // Since we failed, we assume the given browser does not support the constructor\n            if ( this.#ponyfill ) {\n                const Construct = this.#ponyfill;\n                event = new Construct( media, matches );\n            } else {\n                throw new Error( 'MediaQueryEvents::get_MediaQueryListEvent Failed to create event object, requires a ponyfill' );\n            }\n        }\n        return event;\n    }\n\n    /**\n     * Propagate media query event and dispatch custom events\n     * @private\n     * @param {MediaQueryListEvent} event - Actual MediaQueryListEvent\n     * @param {string} query - Media query\n     * @param {boolean} forceEvents - Force the firing of the query event\n     * @return {void}\n     */\n    #event_media( event, query, forceEvents = false ) {\n\n        // Make event data\n        const matches = event.matches;\n        const media = this.#queries[ query ];\n        const data = { matches, media, event, query };\n        data.target = this;\n\n        // Dispatch specific event\n        this.#dispatch_event( 'media.' + ( event.matches ? 'on' : 'off' ), data );\n\n        // Dispatch change event\n        this.#dispatch_event( 'media.change', data );\n\n        // Dispatch query event only on query match\n        if ( forceEvents === true || event.matches ) {\n            this.#dispatch_event( query, data );\n        }\n    }\n\n    /**\n     * Internal dispatch event\n     * @private\n     * @param {string} name - Event name\n     * @param {null|Object} data - Event data\n     * @return {void}\n     */\n    #dispatch_event( name, data = null ) {\n\n        // Create event\n        const event = new CustomEvent( name, { bubbles : true, cancelable : false, detail : data } );\n\n        // Dispatch event\n        this.#target.dispatchEvent( event );\n    }\n\n    /**\n     * Require multiple media queries\n     * @public\n     * @param {Array.<string>} queries - A list of media queries that are used as events\n     * @return {MediaQueryEvents} - Instance for chaining\n     */\n    requireQueries( queries ) {\n        if ( !( queries instanceof Array ) ) {\n            throw new Error( 'MediaQueryEvents::requireQueries Argument queries must be an Array' );\n        }\n        for ( let i = 0; i < queries.length; i++ ) {\n            this.#require_query( queries[ i ] );\n        }\n        return this;\n    }\n\n    /**\n     * Dispatch media query event\n     * @public\n     * @param {string} query - Media query\n     * @param {boolean} matches - Override the matching boolean\n     * @return {MediaQueryEvents} - Instance for chaining\n     */\n    dispatchEvent( query, matches = null ) {\n\n        // Query is required/at least one event should be bound\n        if ( !this.#queries[ query ] ) {\n            throw new Error( 'MediaQueryEvents::dispatchEvent Unknown media query: ' + query );\n        }\n\n        // Fake the change event, but expect errors on older browsers\n        matches = typeof matches === 'boolean' ? matches : this.#queries[ query ].matches;\n        const event = this.#get_MediaQueryListEvent( query, query, matches );\n\n        // Call the internal handler with query and fake event\n        this.#event_media( event, query, true );\n        return this;\n    }\n\n    /**\n     * Register media query event listener\n     * @public\n     * @param {string} query - Media query\n     * @param {Function} callback - Callback to register for event\n     * @param {boolean|Object} useCapture - Capture style or options\n     * @param {boolean} dontFire - Do not fire on match during binding\n     * @return {MediaQueryEvents} - Instance for chaining\n     */\n    addEventListener( query, callback, useCapture = false, dontFire = false ) {\n\n        // Get the required media query\n        const media = this.#require_query( query );\n\n        // Add actual listener\n        this.#target.addEventListener( query, callback, useCapture );\n\n        // Fire new handler only if matching initially and not explicitly prevented\n        if ( media && dontFire !== true && media.matches ) {\n\n            // Get event data\n            const matches = true;\n            const data = { matches, media, query };\n            data.target = this;\n\n            // Add fake list event\n            data.event = this.#get_MediaQueryListEvent( query, query, matches );\n\n            // Create actual media query event\n            const event = new CustomEvent( query, { bubbles : true, cancelable : false, detail : data } );\n\n            // Run only the freshly bound handler\n            callback.apply( this.#target, [ event ] );\n        }\n        return this;\n    }\n\n    /**\n     * Remove media query event listener\n     * @public\n     * @param {string} query - Media query\n     * @param {function} callback - Callback to remove from event\n     * @param {boolean|Object} useCapture - Capture style or options\n     * @return {MediaQueryEvents} - Instance for chaining\n     */\n    removeEventListener( query, callback, useCapture = false ) {\n        this.#target.removeEventListener( query, callback, useCapture );\n        return this;\n    }\n}\n","/* !\n * @module      : @squirrel-forge/mediaquery-events\n * @version     : 0.8.1\n * @license     : MIT\n * @copyright   : 2022 squirrel-forge\n * @author      : Daniel Hartwell aka. siux <me@siux.info>\n * @description : Use css media queries as javascript event names.\n */\n\n/**\n * Requires\n */\nimport { MediaQueryEvents } from './MediaQueryEvents.js';\nimport { attachToContext } from './attachToContext.js';\n\n// Create instance\nconst media = new MediaQueryEvents();\n\n// Default context names\nlet names = [ 'media' ];\n\n// Allow for global overrides\nif ( window.mqe_OVERRIDE && window.mqe_OVERRIDE instanceof Array ) {\n    names = window.mqe_OVERRIDE;\n}\n\n// Always define context.mqe if not taken\nnames.push( 'mqe' );\n\n// Create global references\nfor ( let i = 0; i < names.length; i++ ) {\n    attachToContext( media.target, names[ i ], media );\n}\n","/**\n * Bind MediaQueryEvents instance to object property\n * @private\n * @param {window|document|HTMLElement|Object} target - Event target\n * @param {string} name - Context name on event target\n * @param {MediaQueryEvents} instance - MediaQueryEvents instance\n * @return {void}\n */\nexport function attachToContext( target, name, instance ) {\n    if ( target &&  name && instance && typeof target[ name ] === 'undefined' ) {\n        target[ name ] = instance;\n    }\n}\n"],"names":["MediaQueryEvents","target","window","ponyfill","debug","addEventListener","removeEventListener","dispatchEvent","msg","Error","this","state","queries","Array","i","length","query","matches","event","callback","useCapture","dontFire","media","data","CustomEvent","bubbles","cancelable","detail","apply","constructor","reservedNames","includes","matchMedia","e","error","onchange","MediaQueryListEvent","forceEvents","name","instance","names","mqe_OVERRIDE","push"],"sourceRoot":""}