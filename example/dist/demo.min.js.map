{"version":3,"file":"demo.min.js","mappings":"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","sources":["webpack:///../../src/MediaQueryEvents.js","webpack:///../../src/MediaQueryListEventPonyFill.js","webpack:///../../index.js","webpack:///./demo.js"],"sourcesContent":["/**\n * MediaQueryEvents\n * @class\n */\nexport class MediaQueryEvents {\n\n    /**\n     * Debug object\n     * @private\n     * @property\n     * @type {null|console|Object}\n     */\n    #debug = null;\n\n    /**\n     * Event target\n     * @private\n     * @property\n     * @type {null|window|document|HTMLElement|Object}\n     */\n    #target = null;\n\n    /**\n     * Media queries reference\n     * @private\n     * @property\n     * @type {Object}\n     */\n    #queries = {};\n\n    /**\n     * MediaQueryListEventPonyFill constructor\n     * @private\n     * @property\n     * @type {null|MediaQueryListEventPonyFill|Function}\n     */\n    #ponyfill = null;\n\n    /**\n     * Constructor\n     * @constructor\n     * @param {window|document|HTMLElement|Object} target - Object to dispatch and bind events on\n     * @param {null|Function} ponyfill - MediaQueryListEvent ponyfill object constructor\n     * @param {null|console|Object} debug - Console or alike object to show debugging\n     */\n    constructor( { target = window, ponyfill = null, debug = null } = {} ) {\n        if ( !target.addEventListener || !target.removeEventListener || !target.dispatchEvent ) {\n            const msg = 'Must implement following methods: addEventListener, removeEventListener, dispatchEvent';\n            throw new Error( 'MediaQueryEvents::constructor Argument { target } ' + msg );\n        }\n        this.#debug = debug;\n        this.#target = target;\n        if ( typeof ponyfill === 'function' ) this.#ponyfill = ponyfill;\n    }\n\n    /**\n     * Target getter\n     * @public\n     * @return {window|document|HTMLElement|Object} - Event target\n     */\n    get target() {\n        return this.#target;\n    }\n\n    /**\n     * Debug getter\n     * @public\n     * @return {null|console|Object} - Debug reference\n     */\n    get debug() {\n        return this.#debug;\n    }\n\n    /**\n     * Debug setter\n     * @public\n     * @param {null|console|Object} state - Debug reference\n     * @return {void}\n     */\n    set debug( state ) {\n        if ( typeof state !== 'object' ) {\n            throw new Error( 'MediaQueryEvents::debug Property value must be an Object or null' );\n        }\n        this.#debug = state;\n    }\n\n    /**\n     * Get existing or create new media query\n     * @private\n     * @param {string} query - Media query string\n     * @return {MediaQueryList} - MediaQueryList object representation of media query\n     */\n    #require_query( query ) {\n\n        // Empty query or invalid type\n        if ( typeof query !== 'string' || !query.length ) {\n            throw new Error( 'MediaQueryEvents::#require_query Argument query must be a non empty string' );\n        }\n\n        // Create query\n        if ( !this.#queries[ query ] ) {\n            let media;\n            try {\n                media = window.matchMedia( query );\n            } catch ( e ) {\n                if ( this.#debug ) this.#debug.error( e );\n                throw new Error( 'MediaQueryEvents::#require_query Argument query must be a valid media query' );\n            }\n\n            /**\n             * Internal query event handler\n             * @private\n             * @param {MediaQueryListEvent} event - Event object\n             * @return {void}\n             */\n            media.onchange = ( event ) => { this.#event_media( event, query ); };\n            this.#queries[ query ] = media;\n            return media;\n        }\n\n        // Return defined query\n        return this.#queries[ query ];\n    }\n\n    /**\n     * Create MediaQueryListEvent object\n     * @private\n     * @param {string} media - Media query\n     * @param {boolean} matches - Query matches\n     * @return {MediaQueryListEvent|MediaQueryListEventPonyFill|Object} - Event object\n     */\n    #get_MediaQueryListEvent( media, matches ) {\n        let event;\n        try {\n            event = new MediaQueryListEvent( 'change', { media, matches } );\n        } catch ( e ) {\n            if ( this.#debug ) this.#debug.error( e );\n\n            // Since we failed, we assume the given browser does not support the constructor\n            if ( this.#ponyfill ) {\n                const Construct = this.#ponyfill;\n                event = new Construct( media, matches );\n            } else {\n                throw new Error( 'MediaQueryEvents::get_MediaQueryListEvent Failed to create event object, requires a ponyfill' );\n            }\n        }\n        return event;\n    }\n\n    /**\n     * Propagate media query event and dispatch custom events\n     * @private\n     * @param {MediaQueryListEvent} event - Actual MediaQueryListEvent\n     * @param {string} query - Media query\n     * @param {boolean} forceEvents - Force the firing of the query event\n     * @return {void}\n     */\n    #event_media( event, query, forceEvents = false ) {\n\n        // Make event data\n        const matches = event.matches;\n        const media = this.#queries[ query ];\n        const data = { matches, media, event, query };\n        data.target = this;\n\n        // Dispatch specific event\n        this.#dispatch_event( 'media.' + ( event.matches ? 'on' : 'off' ), data );\n\n        // Dispatch change event\n        this.#dispatch_event( 'media.change', data );\n\n        // Dispatch query event only on query match\n        if ( forceEvents === true || event.matches ) {\n            this.#dispatch_event( query, data );\n        }\n    }\n\n    /**\n     * Internal dispatch event\n     * @private\n     * @param {string} name - Event name\n     * @param {null|Object} data - Event data\n     * @return {void}\n     */\n    #dispatch_event( name, data = null ) {\n\n        // Create event\n        const event = new CustomEvent( name, { bubbles : true, cancelable : false, detail : data } );\n\n        // Dispatch event\n        this.#target.dispatchEvent( event );\n    }\n\n    /**\n     * Require multiple media queries\n     * @public\n     * @param {Array.<string>} queries - A list of media queries that are used as events\n     * @return {MediaQueryEvents} - Instance for chaining\n     */\n    requireQueries( queries ) {\n        if ( !( queries instanceof Array ) ) {\n            throw new Error( 'MediaQueryEvents::requireQueries Argument queries must be an Array' );\n        }\n        for ( let i = 0; i < queries.length; i++ ) {\n            this.#require_query( queries[ i ] );\n        }\n        return this;\n    }\n\n    /**\n     * Dispatch media query event\n     * @public\n     * @param {string} query - Media query\n     * @param {boolean} matches - Override the matching boolean\n     * @return {MediaQueryEvents} - Instance for chaining\n     */\n    dispatchEvent( query, matches = null ) {\n\n        // Query is required/at least one event should be bound\n        if ( !this.#queries[ query ] ) {\n            throw new Error( 'MediaQueryEvents::dispatchEvent Unknown media query: ' + query );\n        }\n\n        // Fake the change event, but expect errors on older browsers\n        matches = typeof matches === 'boolean' ? matches : this.#queries[ query ].matches;\n        const event = this.#get_MediaQueryListEvent( query, query, matches );\n\n        // Call the internal handler with query and fake event\n        this.#event_media( event, query, true );\n        return this;\n    }\n\n    /**\n     * Register media query event listener\n     * @public\n     * @param {string} query - Media query\n     * @param {Function} callback - Callback to register for event\n     * @param {boolean|Object} useCapture - Capture style or options\n     * @param {boolean} dontFire - Do not fire on match during binding\n     * @return {MediaQueryEvents} - Instance for chaining\n     */\n    addEventListener( query, callback, useCapture = false, dontFire = false ) {\n\n        // Get the required media query\n        const media = this.#require_query( query );\n\n        // Add actual listener\n        this.#target.addEventListener( query, callback, useCapture );\n\n        // Fire new handler only if matching initially and not explicitly prevented\n        if ( dontFire !== true && media.matches ) {\n\n            // Get event data\n            const matches = true;\n            const data = { matches, media, query };\n            data.target = this;\n\n            // Add fake list event\n            data.event = this.#get_MediaQueryListEvent( query, query, matches );\n\n            // Create actual media query event\n            const event = new CustomEvent( query, { bubbles : true, cancelable : false, detail : data } );\n\n            // Run only the freshly bound handler\n            callback.apply( this.#target, [ event ] );\n        }\n        return this;\n    }\n\n    /**\n     * Remove media query event listener\n     * @public\n     * @param {string} query - Media query\n     * @param {function} callback - Callback to remove from event\n     * @param {boolean|Object} useCapture - Capture style or options\n     * @return {MediaQueryEvents} - Instance for chaining\n     */\n    removeEventListener( query, callback, useCapture = false ) {\n        this.#target.removeEventListener( query, callback, useCapture );\n        return this;\n    }\n}\n","/**\n * MediaQueryListEvent ponyFill\n * @class\n */\nexport class MediaQueryListEventPonyFill {\n\n    /**\n     * Media query\n     * @private\n     * @property\n     * @type {null|string}\n     */\n    #media = null;\n\n    /**\n     * Query matches\n     * @private\n     * @property\n     * @type {boolean}\n     */\n    #matches = false;\n\n    /**\n     * Constructor\n     * @constructor\n     * @param {string} media - Media query\n     * @param {boolean} matches - Query matches\n     * @return {MediaQueryListEvent|MediaQueryListEventPonyFill} - Event object\n     */\n    constructor( media, matches ) {\n        if ( typeof media !== 'string' || !media.length ) {\n            throw new Error( 'MediaQueryListEventPolyFill::constructor First argument media must be a non empty string' );\n        }\n        if ( typeof matches !== 'boolean' ) {\n            throw new Error( 'MediaQueryListEventPolyFill::constructor Second argument matches must be a boolean' );\n        }\n        this.#media = media;\n        this.#matches = matches;\n    }\n\n    /**\n     * Media getter\n     * @public\n     * @return {boolean} - True if query matches\n     */\n    get media() {\n        return this.#media;\n    }\n\n    /**\n     * Matches getter\n     * @public\n     * @return {boolean} - True if query matches\n     */\n    get matches() {\n        return this.#matches;\n    }\n}\n","/* !\n * @module      : @squirrel-forge/mediaquery-events\n * @version     : 0.8.0\n * @license     : MIT\n * @copyright   : 2022 squirrel-forge\n * @author      : Daniel Hartwell aka. siux <me@siux.info>\n * @description : Use css media queries as javascript event names.\n */\n\n/**\n * Module exports\n */\nexport { MediaQueryEvents } from './src/MediaQueryEvents.js';\nexport { MediaQueryListEventPonyFill } from './src/MediaQueryListEventPonyFill.js';\nexport { attachToContext } from './src/attachToContext.js';\n","/**\n * Requires\n */\nimport { MediaQueryEvents, MediaQueryListEventPonyFill } from '../../index.js';\n\n// Create instance with your preferred options\nconst media = new MediaQueryEvents( {\n    ponyfill : MediaQueryListEventPonyFill,\n    debug : console,\n} );\n\n/**\n * Event handler\n * @private\n * @param {CustomEvent} event - MediaQuery CustomEvent instance\n * @return {void}\n */\nconst _event_handler = ( event ) => {\n\n    // The event name the listener was bound to\n    //  if this is equal to event.detail.query this is not a global event\n    const listener = event.type;\n\n    // The media query string that is subject to this event\n    const query = event.detail.query;\n\n    // The query state\n    //  note this can be overridden when manually using MediaQueryEvents.dispatchEvent() to trigger a media query event\n    const matches = event.detail.event.matches;\n\n    // Do something with this information\n\n    // Set query on output container if it matches\n    if ( matches ) {\n        document.getElementById( 'query' ).innerText = query;\n    }\n\n    // Send event information to console if debug is enabled\n    if ( media.debug ) media.debug.log( { listener, query, matches } );\n};\n\n// Bind some global events\nmedia.addEventListener( 'media.on', _event_handler );\nmedia.addEventListener( 'media.off', _event_handler );\nmedia.addEventListener( 'media.change', _event_handler );\n\n// And bind some actual events\nmedia.addEventListener( '(max-width: 767px)', _event_handler );\nmedia.addEventListener( '(min-width: 768px) and (max-width: 1024px)', _event_handler );\nmedia.addEventListener( '(min-width: 1025px)', _event_handler );\n"],"names":["MediaQueryEvents","target","window","ponyfill","debug","addEventListener","removeEventListener","dispatchEvent","msg","Error","state","queries","Array","i","length","query","matches","event","callback","useCapture","dontFire","media","data","CustomEvent","bubbles","cancelable","detail","apply","matchMedia","e","error","onchange","MediaQueryListEvent","Construct","forceEvents","name","MediaQueryListEventPonyFill","attachToContext","console","_event_handler","listener","type","document","getElementById","innerText","log"],"sourceRoot":""}