/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ../../src/MediaQueryEvents.js
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }

function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

var _debug = /*#__PURE__*/new WeakMap();

var _target = /*#__PURE__*/new WeakMap();

var _queries = /*#__PURE__*/new WeakMap();

var _ponyfill = /*#__PURE__*/new WeakMap();

var _require_query = /*#__PURE__*/new WeakSet();

var _get_MediaQueryListEvent = /*#__PURE__*/new WeakSet();

var _event_media = /*#__PURE__*/new WeakSet();

var _dispatch_event = /*#__PURE__*/new WeakSet();

/**
 * MediaQueryEvents
 * @class
 */
var MediaQueryEvents = /*#__PURE__*/function () {
  /**
   * Reserved event names
   *  no queries are created for those defined here since they would not work
   * @public
   * @static
   * @property
   * @type {Array<string>}
   */

  /**
   * Debug object
   * @private
   * @property
   * @type {null|console|Object}
   */

  /**
   * Event target
   * @private
   * @property
   * @type {null|window|document|HTMLElement|Object}
   */

  /**
   * Media queries reference
   * @private
   * @property
   * @type {Object}
   */

  /**
   * MediaQueryListEventPonyFill constructor
   * @private
   * @property
   * @type {null|MediaQueryListEventPonyFill|Function}
   */

  /**
   * Constructor
   * @constructor
   * @param {window|document|HTMLElement|Object} target - Object to dispatch and bind events on
   * @param {null|Function} ponyfill - MediaQueryListEvent ponyfill object constructor
   * @param {null|console|Object} debug - Console or alike object to show debugging
   */
  function MediaQueryEvents() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$target = _ref.target,
        target = _ref$target === void 0 ? window : _ref$target,
        _ref$ponyfill = _ref.ponyfill,
        ponyfill = _ref$ponyfill === void 0 ? null : _ref$ponyfill,
        _ref$debug = _ref.debug,
        debug = _ref$debug === void 0 ? null : _ref$debug;

    _classCallCheck(this, MediaQueryEvents);

    _classPrivateMethodInitSpec(this, _dispatch_event);

    _classPrivateMethodInitSpec(this, _event_media);

    _classPrivateMethodInitSpec(this, _get_MediaQueryListEvent);

    _classPrivateMethodInitSpec(this, _require_query);

    _classPrivateFieldInitSpec(this, _debug, {
      writable: true,
      value: null
    });

    _classPrivateFieldInitSpec(this, _target, {
      writable: true,
      value: null
    });

    _classPrivateFieldInitSpec(this, _queries, {
      writable: true,
      value: {}
    });

    _classPrivateFieldInitSpec(this, _ponyfill, {
      writable: true,
      value: null
    });

    if (!target.addEventListener || !target.removeEventListener || !target.dispatchEvent) {
      var msg = 'Must implement following methods: addEventListener, removeEventListener, dispatchEvent';
      throw new Error('MediaQueryEvents::constructor Argument { target } ' + msg);
    }

    _classPrivateFieldSet(this, _debug, debug);

    _classPrivateFieldSet(this, _target, target);

    if (typeof ponyfill === 'function') _classPrivateFieldSet(this, _ponyfill, ponyfill);
  }
  /**
   * Target getter
   * @public
   * @return {window|document|HTMLElement|Object} - Event target
   */


  _createClass(MediaQueryEvents, [{
    key: "target",
    get: function get() {
      return _classPrivateFieldGet(this, _target);
    }
    /**
     * Debug getter
     * @public
     * @return {null|console|Object} - Debug reference
     */

  }, {
    key: "debug",
    get: function get() {
      return _classPrivateFieldGet(this, _debug);
    }
    /**
     * Debug setter
     * @public
     * @param {null|console|Object} state - Debug reference
     * @return {void}
     */
    ,
    set: function set(state) {
      if (_typeof(state) !== 'object') {
        throw new Error('MediaQueryEvents::debug Property value must be an Object or null');
      }

      _classPrivateFieldSet(this, _debug, state);
    }
    /**
     * Get existing or create new media query
     * @private
     * @param {string} query - Media query string
     * @return {MediaQueryList|null} - MediaQueryList object representation of media query or null if reserved
     */

  }, {
    key: "matches",
    value:
    /**
     * Check if given query matches
     * @public
     * @param {string} query - Media query
     * @return {boolean|null} - Null if reserved or error
     */
    function matches(query) {
      var _classPrivateMethodGe;

      return (_classPrivateMethodGe = _classPrivateMethodGet(this, _require_query, _require_query2).call(this, query)) === null || _classPrivateMethodGe === void 0 ? void 0 : _classPrivateMethodGe.matches;
    }
    /**
     * Require multiple media queries
     * @public
     * @param {Array.<string>} queries - A list of media queries that are used as events
     * @return {MediaQueryEvents} - Instance for chaining
     */

  }, {
    key: "requireQueries",
    value: function requireQueries(queries) {
      if (!(queries instanceof Array)) {
        throw new Error('MediaQueryEvents::requireQueries Argument queries must be an Array');
      }

      for (var i = 0; i < queries.length; i++) {
        _classPrivateMethodGet(this, _require_query, _require_query2).call(this, queries[i]);
      }

      return this;
    }
    /**
     * Dispatch media query event
     * @public
     * @param {string} query - Media query
     * @param {boolean} matches - Override the matching boolean
     * @return {MediaQueryEvents} - Instance for chaining
     */

  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(query) {
      var matches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      // Query is required/at least one event should be bound
      if (!_classPrivateFieldGet(this, _queries)[query]) {
        throw new Error('MediaQueryEvents::dispatchEvent Unknown media query: ' + query);
      } // Fake the change event, but expect errors on older browsers


      matches = typeof matches === 'boolean' ? matches : _classPrivateFieldGet(this, _queries)[query].matches;

      var event = _classPrivateMethodGet(this, _get_MediaQueryListEvent, _get_MediaQueryListEvent2).call(this, query, query, matches); // Call the internal handler with query and fake event


      _classPrivateMethodGet(this, _event_media, _event_media2).call(this, event, query, true);

      return this;
    }
    /**
     * Register media query event listener
     * @public
     * @param {string} query - Media query
     * @param {Function} callback - Callback to register for event
     * @param {boolean|Object} useCapture - Capture style or options
     * @param {boolean} dontFire - Do not fire on match during binding
     * @return {MediaQueryEvents} - Instance for chaining
     */

  }, {
    key: "addEventListener",
    value: function addEventListener(query, callback) {
      var useCapture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var dontFire = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      // Get the required media query
      var media = _classPrivateMethodGet(this, _require_query, _require_query2).call(this, query); // Add actual listener


      _classPrivateFieldGet(this, _target).addEventListener(query, callback, useCapture); // Fire new handler only if matching initially and not explicitly prevented


      if (media && dontFire !== true && media.matches) {
        // Get event data
        var matches = true;
        var data = {
          matches: matches,
          media: media,
          query: query
        };
        data.target = this; // Add fake list event

        data.event = _classPrivateMethodGet(this, _get_MediaQueryListEvent, _get_MediaQueryListEvent2).call(this, query, query, matches); // Create actual media query event

        var event = new CustomEvent(query, {
          bubbles: true,
          cancelable: false,
          detail: data
        }); // Run only the freshly bound handler

        callback.apply(_classPrivateFieldGet(this, _target), [event]);
      }

      return this;
    }
    /**
     * Remove media query event listener
     * @public
     * @param {string} query - Media query
     * @param {function} callback - Callback to remove from event
     * @param {boolean|Object} useCapture - Capture style or options
     * @return {MediaQueryEvents} - Instance for chaining
     */

  }, {
    key: "removeEventListener",
    value: function removeEventListener(query, callback) {
      var useCapture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      _classPrivateFieldGet(this, _target).removeEventListener(query, callback, useCapture);

      return this;
    }
  }]);

  return MediaQueryEvents;
}();

function _require_query2(query) {
  var _this = this;

  // Empty query or invalid type
  if (typeof query !== 'string' || !query.length) {
    throw new Error('MediaQueryEvents::#require_query Argument query must be a non empty string');
  } // Check reserved event names


  if (this.constructor.reservedNames.includes(query)) return null; // Create query

  if (!_classPrivateFieldGet(this, _queries)[query]) {
    var media;

    try {
      media = window.matchMedia(query);
    } catch (e) {
      if (_classPrivateFieldGet(this, _debug)) _classPrivateFieldGet(this, _debug).error(e);
      throw new Error('MediaQueryEvents::#require_query Argument query must be a valid media query');
    }
    /**
     * Internal query event handler
     * @private
     * @param {MediaQueryListEvent} event - Event object
     * @return {void}
     */


    media.onchange = function (event) {
      _classPrivateMethodGet(_this, _event_media, _event_media2).call(_this, event, query);
    };

    _classPrivateFieldGet(this, _queries)[query] = media;
    return media;
  } // Return defined query


  return _classPrivateFieldGet(this, _queries)[query];
}

function _get_MediaQueryListEvent2(media, matches) {
  var event;

  try {
    event = new MediaQueryListEvent('change', {
      media: media,
      matches: matches
    });
  } catch (e) {
    if (_classPrivateFieldGet(this, _debug)) _classPrivateFieldGet(this, _debug).error(e); // Since we failed, we assume the given browser does not support the constructor

    if (_classPrivateFieldGet(this, _ponyfill)) {
      var Construct = _classPrivateFieldGet(this, _ponyfill);

      event = new Construct(media, matches);
    } else {
      throw new Error('MediaQueryEvents::get_MediaQueryListEvent Failed to create event object, requires a ponyfill');
    }
  }

  return event;
}

function _event_media2(event, query) {
  var forceEvents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  // Make event data
  var matches = event.matches;

  var media = _classPrivateFieldGet(this, _queries)[query];

  var data = {
    matches: matches,
    media: media,
    event: event,
    query: query
  };
  data.target = this; // Dispatch specific event

  _classPrivateMethodGet(this, _dispatch_event, _dispatch_event2).call(this, 'media.' + (event.matches ? 'on' : 'off'), data); // Dispatch change event


  _classPrivateMethodGet(this, _dispatch_event, _dispatch_event2).call(this, 'media.change', data); // Dispatch query event only on query match


  if (forceEvents === true || event.matches) {
    _classPrivateMethodGet(this, _dispatch_event, _dispatch_event2).call(this, query, data);
  }
}

function _dispatch_event2(name) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  // Create event
  var event = new CustomEvent(name, {
    bubbles: true,
    cancelable: false,
    detail: data
  }); // Dispatch event

  _classPrivateFieldGet(this, _target).dispatchEvent(event);
}

_defineProperty(MediaQueryEvents, "reservedNames", ['media.on', 'media.off', 'media.change']);
;// CONCATENATED MODULE: ../../src/MediaQueryListEventPonyFill.js
function MediaQueryListEventPonyFill_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function MediaQueryListEventPonyFill_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function MediaQueryListEventPonyFill_createClass(Constructor, protoProps, staticProps) { if (protoProps) MediaQueryListEventPonyFill_defineProperties(Constructor.prototype, protoProps); if (staticProps) MediaQueryListEventPonyFill_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function MediaQueryListEventPonyFill_classPrivateFieldInitSpec(obj, privateMap, value) { MediaQueryListEventPonyFill_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }

function MediaQueryListEventPonyFill_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function MediaQueryListEventPonyFill_classPrivateFieldGet(receiver, privateMap) { var descriptor = MediaQueryListEventPonyFill_classExtractFieldDescriptor(receiver, privateMap, "get"); return MediaQueryListEventPonyFill_classApplyDescriptorGet(receiver, descriptor); }

function MediaQueryListEventPonyFill_classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function MediaQueryListEventPonyFill_classPrivateFieldSet(receiver, privateMap, value) { var descriptor = MediaQueryListEventPonyFill_classExtractFieldDescriptor(receiver, privateMap, "set"); MediaQueryListEventPonyFill_classApplyDescriptorSet(receiver, descriptor, value); return value; }

function MediaQueryListEventPonyFill_classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function MediaQueryListEventPonyFill_classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

var _media = /*#__PURE__*/new WeakMap();

var _matches = /*#__PURE__*/new WeakMap();

/**
 * MediaQueryListEvent ponyFill
 * @class
 */
var MediaQueryListEventPonyFill = /*#__PURE__*/function () {
  /**
   * Media query
   * @private
   * @property
   * @type {null|string}
   */

  /**
   * Query matches
   * @private
   * @property
   * @type {boolean}
   */

  /**
   * Constructor
   * @constructor
   * @param {string} media - Media query
   * @param {boolean} matches - Query matches
   * @return {MediaQueryListEvent|MediaQueryListEventPonyFill} - Event object
   */
  function MediaQueryListEventPonyFill(media, matches) {
    MediaQueryListEventPonyFill_classCallCheck(this, MediaQueryListEventPonyFill);

    MediaQueryListEventPonyFill_classPrivateFieldInitSpec(this, _media, {
      writable: true,
      value: null
    });

    MediaQueryListEventPonyFill_classPrivateFieldInitSpec(this, _matches, {
      writable: true,
      value: false
    });

    if (typeof media !== 'string' || !media.length) {
      throw new Error('MediaQueryListEventPolyFill::constructor First argument media must be a non empty string');
    }

    if (typeof matches !== 'boolean') {
      throw new Error('MediaQueryListEventPolyFill::constructor Second argument matches must be a boolean');
    }

    MediaQueryListEventPonyFill_classPrivateFieldSet(this, _media, media);

    MediaQueryListEventPonyFill_classPrivateFieldSet(this, _matches, matches);
  }
  /**
   * Media getter
   * @public
   * @return {boolean} - True if query matches
   */


  MediaQueryListEventPonyFill_createClass(MediaQueryListEventPonyFill, [{
    key: "media",
    get: function get() {
      return MediaQueryListEventPonyFill_classPrivateFieldGet(this, _media);
    }
    /**
     * Matches getter
     * @public
     * @return {boolean} - True if query matches
     */

  }, {
    key: "matches",
    get: function get() {
      return MediaQueryListEventPonyFill_classPrivateFieldGet(this, _matches);
    }
  }]);

  return MediaQueryListEventPonyFill;
}();
;// CONCATENATED MODULE: ../../index.js
/* !
 * @module      : @squirrel-forge/mediaquery-events
 * @version     : 0.8.2
 * @license     : MIT
 * @copyright   : 2022 squirrel-forge
 * @author      : Daniel Hartwell aka. siux <me@siux.info>
 * @description : Use css media queries as javascript event names.
 */

/**
 * Module exports
 */



;// CONCATENATED MODULE: ./demo.js
/**
 * Requires
 */
 // Create instance with your preferred options

var media = new MediaQueryEvents({
  ponyfill: MediaQueryListEventPonyFill,
  debug: console
});
/**
 * Event handler
 * @private
 * @param {CustomEvent} event - MediaQuery CustomEvent instance
 * @return {void}
 */

var _event_handler = function _event_handler(event) {
  // The event name the listener was bound to
  //  if this is equal to event.detail.query this is not a global event
  var listener = event.type; // The media query string that is subject to this event

  var query = event.detail.query; // The query state
  //  note this can be overridden when manually using MediaQueryEvents.dispatchEvent() to trigger a media query event

  var matches = event.detail.event.matches; // Do something with this information
  // Set query on output container if it matches

  if (matches) {
    document.getElementById('query').innerText = query;
  } // Send event information to console if debug is enabled


  if (media.debug) media.debug.log({
    listener: listener,
    query: query,
    matches: matches
  });
}; // Bind some global events


media.addEventListener('media.on', _event_handler);
media.addEventListener('media.off', _event_handler);
media.addEventListener('media.change', _event_handler); // And bind some actual events

media.addEventListener('(max-width: 767px)', _event_handler);
media.addEventListener('(min-width: 768px) and (max-width: 1024px)', _event_handler);
media.addEventListener('(min-width: 1025px)', _event_handler);
/******/ })()
;
//# sourceMappingURL=demo.min.js.map